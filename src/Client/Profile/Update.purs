module Client.Profile.Update where

import Prelude

import Client.Common.Dom as CCD
import Client.Common.File as CCF
import Client.Common.Network (request)
import Data.Array ((:))
import Data.Array as DA
import Data.Either (Either(..))
import Data.Int as DI
import Data.Maybe (Maybe(..))
import Data.Maybe as DM
import Data.String as DS
import Data.String.Read as DSR
import Data.Symbol (class IsSymbol)
import Data.Tuple.Nested (type (/\), (/\))
import Debug (spy)
import Effect (Effect)
import Effect.Aff (Aff)
import Effect.Class (liftEffect)
import Effect.Class as EC
import Flame (ListUpdate)
import Flame.Subscription as FS
import Payload.ResponseTypes (Response(..))
import Prim.Row (class Cons)
import Record as R
import Shared.DateTime (DateWrapper(..))
import Shared.DateTime as SDT
import Shared.Element (ElementId(..))
import Shared.Im.Types (ImMessage(..))
import Shared.Modal.Types (ScreenModal(..))
import Shared.Network (RequestStatus(..))
import Shared.Network as SN
import Shared.Options.MountPoint (imId)
import Shared.Options.Profile (maxFinalTags, maxLanguages, maxStartingTags)
import Shared.Privilege (Privilege(..))
import Shared.Profile.Types (PM, ProfileMessage(..), ProfileModel, What(..))
import Type.Proxy (Proxy(..))
import Web.DOM (Element)

getFileInput ∷ Effect Element
getFileInput = CCD.unsafeGetElementById AvatarFileInput

update ∷ ListUpdate ProfileModel ProfileMessage
update model = case _ of
      SetPField upd → setField model upd
      SelectAvatar → selectAvatar model
      SetCountry value → setCountry value model
      SetAge value → setAge value model
      SetGender value → setGender value model
      ToggleVisibility modal → setVisibility model modal
      SetAutoGenerated what event → setAutoGenerated model what event
      SetLanguage value → setLanguage value model
      SetTag value → setTag value model
      Save → save model
      AfterRegistration → model /\ []
      UpdatePrivileges _ → model /\ []

save ∷ ProfileModel → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
save model = model { loading = true } /\ [ saveIt ]
      where
      fields =
            { name: { value: DM.fromMaybe model.user.name model.nameInputed, generated: DA.elem Name model.generated }
            , headline: { value: DM.fromMaybe model.user.headline model.headlineInputed, generated: DA.elem Headline model.generated }
            , description: { value: DM.fromMaybe model.user.description model.descriptionInputed, generated: DA.elem Description model.generated }
            , age: model.ageInputed
            , tags: model.tagsInputed
            , country: model.countryInputed
            , languages: model.languagesInputed
            , gender: model.genderInputed
            , avatar: model.avatarInputed
            }
      saveIt = do
            result ← request.profile.save { body: fields }
            case result of
                  Right (Response response) → do
                        EC.liftEffect do
                              FS.send imId $ SetNameFromProfile fields.name.value
                              FS.send imId $ SetAvatarFromProfile response.body.avatar
                        pure <<< Just <<< SetPField $ _ { loading = false }
                  Left err → do
                        pure <<< Just <<< SetPField $ _ { updateRequestStatus = Just <<< Failure $ SN.errorMessage err }


setAge ∷ String → ProfileModel → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setAge value model = model { ageInputed = DateWrapper <$> SDT.unformatIsoDate value } /\ []

setCountry ∷ String → ProfileModel → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setCountry value model = model { countryInputed = DI.fromString value } /\ []

setGender ∷ String → ProfileModel → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setGender value model = model { genderInputed = DSR.read value } /\ []

setTag ∷ String → ProfileModel → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setTag tag model =
      model
            { tagsInputed =
                    if DA.elem tag model.tagsInputed then
                          DA.filter (tag /= _) model.tagsInputed
                    else if DA.length model.tagsInputed < maxTags then
                          DA.snoc model.tagsInputed tag
                    else
                          model.tagsInputed
            } /\ []
      where
      maxTags
            | DA.elem MoreTags model.user.privileges = maxFinalTags
            | otherwise = maxStartingTags

setLanguage ∷ String → ProfileModel → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setLanguage value model =
      model
            { languagesInputed = case DI.fromString value of
                    Nothing → []
                    Just id →
                          if DA.elem id model.languagesInputed then
                                DA.filter (id /= _) model.languagesInputed
                          else if DA.length model.languagesInputed < maxLanguages then
                                DA.snoc model.languagesInputed id
                          else
                                model.languagesInputed
            } /\ []

setAutoGenerated ∷ ProfileModel → What → String → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setAutoGenerated model what raw =
      case what of
            Name → model { updateRequestStatus = Nothing, nameInputed = value, generated = markGenerated, loading = value == Nothing } /\ [ generated (Proxy ∷ Proxy "nameInputed") ]
            Headline → model { updateRequestStatus = Nothing, headlineInputed = value, generated = markGenerated, loading = value == Nothing } /\ [ generated (Proxy ∷ Proxy "headlineInputed") ]
            Description → model { updateRequestStatus = Nothing, descriptionInputed = value, generated = markGenerated, loading = value == Nothing } /\ [ generated (Proxy ∷ Proxy "descriptionInputed") ]
      where
      value
            | DS.null raw = Nothing
            | otherwise = Just raw

      markGenerated = let g = DA.filter (what == _) model.generated in if value == Nothing then what : g else g

      generated ∷ ∀ r u. IsSymbol r ⇒ Cons r (Maybe String) u PM ⇒ Proxy r → _
      generated field = case value of
            Nothing → do
                  result ← request.profile.generated { body: { field: what } }
                  case result of
                        Right (Response { body }) → do
                              pure <<< Just $ SetPField (R.set field (Just body))
                        Left err → do
                              pure <<< Just <<< SetPField $ _ { updateRequestStatus = Just <<< Failure $ SN.errorMessage err }
            _ → pure Nothing

setVisibility ∷ ProfileModel → ScreenModal → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setVisibility model modal = model { visible = modal == ShowProfile } /\ []

setField ∷ ProfileModel → (ProfileModel → ProfileModel) → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setField model upd = upd model { loading = false } /\ []

selectAvatar ∷ ProfileModel → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
selectAvatar model = model /\ [ selectIt ]
      where
      selectIt = liftEffect do
            input ← getFileInput
            CCF.triggerFileSelect input
            pure Nothing