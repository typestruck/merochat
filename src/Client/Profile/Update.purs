module Client.Profile.Update where

import Prelude
import Shared.Profile.Types

import Client.Common.Dom as CCD
import Client.Common.File as CCF
import Client.Common.Network (request)
import Client.Im.Flame (NoMessages)
import Data.Either (Either(..))
import Data.Maybe (Maybe(..))
import Data.Maybe as DM
import Data.String as DS
import Data.Tuple.Nested (type (/\), (/\))
import Effect (Effect)
import Effect.Aff (Aff, Milliseconds(..))
import Effect.Aff as EA
import Effect.Class (liftEffect)
import Effect.Class as EC
import Flame (ListUpdate)
import Flame.Application.Effectful (AffUpdate, Environment)
import Flame.Application.Effectful as FAE
import Flame.Subscription as FS
import Payload.ResponseTypes (Response(..))
import Shared.Element (ElementId(..))
import Shared.Experiments.Types as SET
import Shared.Im.Types as SIT
import Shared.Modal.Types (ScreenModal(..))
import Shared.Network (RequestStatus(..))
import Shared.Network as SN
import Shared.Options.MountPoint (imId)
import Shared.Unsafe as SU
import Web.DOM (Element)
import Web.DOM.Element as WDE
import Web.Event.Event (Event)
import Web.Event.Event as WEE

getFileInput ∷ Effect Element
getFileInput = CCD.unsafeGetElementById AvatarFileInput

update ∷ ListUpdate ProfileModel ProfileMessage
update model = case _ of
      SetPField upd → setField model upd
      SelectAvatar → selectAvatar model
      ToggleVisibility modal → setVisibility model modal
      SetAutoGenerated what event → setAutoGenerated model what event
      _ → model /\ []

setAutoGenerated ∷ ProfileModel → What → String → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setAutoGenerated model what raw = set /\ generated
      where
      value
            | DS.null raw = Nothing
            | otherwise = Just raw

      set =
            case what of
                  Name → model { nameInputed = value }
                  Headline → model { headlineInputed = value }
                  Description → model { descriptionInputed = value }
      generated  = case value of
            Nothing -> [ do
                  request.profile.field.generated { body: { field: what } }
  ]
            _ -> []

setVisibility ∷ ProfileModel → ScreenModal → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setVisibility model modal = model { visible = modal == ShowProfile } /\ []

setField ∷ ProfileModel → (ProfileModel → ProfileModel) → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setField model upd = upd model /\ []

selectAvatar ∷ ProfileModel → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
selectAvatar model = model /\ [ selectIt ]
      where
      selectIt = liftEffect do
            input ← getFileInput
            CCF.triggerFileSelect input
            pure Nothing