module Client.Profile.Update where

import Prelude

import Client.Common.Dom as CCD
import Client.Common.File as CCF
import Client.Common.Network (request)
import Data.Array as DA
import Data.Either (Either(..))
import Data.Int as DI
import Data.Maybe (Maybe(..))
import Data.String as DS
import Data.Tuple.Nested (type (/\), (/\))
import Effect (Effect)
import Effect.Aff (Aff)
import Effect.Class (liftEffect)
import Flame (ListUpdate)
import Payload.ResponseTypes (Response(..))
import Record as R
import Shared.Element (ElementId(..))
import Shared.Modal.Types (ScreenModal(..))
import Shared.Network (RequestStatus(..))
import Shared.Network as SN
import Shared.Options.Profile (maxLanguages)
import Shared.Profile.Types (ProfileMessage(..), ProfileModel, What(..))
import Type.Proxy (Proxy(..))
import Web.DOM (Element)

getFileInput ∷ Effect Element
getFileInput = CCD.unsafeGetElementById AvatarFileInput

update ∷ ListUpdate ProfileModel ProfileMessage
update model = case _ of
      SetPField upd → setField model upd
      SelectAvatar → selectAvatar model
      ToggleVisibility modal → setVisibility model modal
      SetAutoGenerated what event → setAutoGenerated model what event
      SetLanguage value → setLanguage value model
      Save -> model /\ []
      AfterRegistration -> model /\ []
      UpdatePrivileges _ -> model /\ []

setLanguage :: String -> ProfileModel -> ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setLanguage value model =
      model
            { languagesInputed = case DI.fromString value of
                    Nothing → []
                    Just id →
                        if DA.elem id model.languagesInputed then
                              DA.filter (id /= _) model.languagesInputed
                        else if DA.length model.languagesInputed < maxLanguages then
                              DA.snoc model.languagesInputed id
                        else
                              model.languagesInputed
            } /\ []

setAutoGenerated ∷ ProfileModel → What → String → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setAutoGenerated model what raw =
      case what of
            Name → model { nameInputed = value, loading = value == Nothing } /\ [ generated (Proxy ∷ Proxy "nameInputed") ]
            Headline → model { headlineInputed = value, loading = value == Nothing } /\ [ generated (Proxy ∷ Proxy "nameInputed") ]
            Description → model { descriptionInputed = value, loading = value == Nothing } /\ [ generated (Proxy ∷ Proxy "nameInputed") ]
      where
      value
            | DS.null raw = Nothing
            | otherwise = Just raw

      generated field = case value of
            Nothing → do
                  result ← request.profile.field.generated { body: { field: what } }
                  case result of
                        Right (Response { body }) → do
                              pure <<< Just $ SetPField (R.set field (Just body))
                        Left err → do
                              pure <<< Just <<< SetPField $ _ { updateRequestStatus = Just <<< Failure $ SN.errorMessage err }
            _ → pure Nothing

setVisibility ∷ ProfileModel → ScreenModal → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setVisibility model modal = model { visible = modal == ShowProfile } /\ []

setField ∷ ProfileModel → (ProfileModel → ProfileModel) → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
setField model upd = upd model { loading = false, updateRequestStatus = Nothing } /\ []

selectAvatar ∷ ProfileModel → ProfileModel /\ Array (Aff (Maybe ProfileMessage))
selectAvatar model = model /\ [ selectIt ]
      where
      selectIt = liftEffect do
            input ← getFileInput
            CCF.triggerFileSelect input
            pure Nothing